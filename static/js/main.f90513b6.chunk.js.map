{"version":3,"sources":["App.js","components/Start.js","components/Question.js","utils/index.js","components/End.js","components/Modal.js","reportWebVitals.js","index.js"],"names":["interval","Start","onQuizStart","className","onClick","Question","data","onAnswerUpdate","numberOfQuestions","activeQuestion","onSetActiveQuestion","onSetStep","useState","selected","setSelected","error","setError","radiosWrapper","useRef","useEffect","findCheckedInput","current","querySelector","checked","changeAnswerHandler","e","target","value","question","ref","choices","map","choice","i","type","name","onChange","prevState","q","a","formatTime","time","Math","floor","End","results","onReset","correctAnswers","setCorrectAnswers","correct","forEach","result","index","answer","class","length","Modal","onClose","id","App","step","setStep","setActiveQuestion","answers","setAnswer","setTime","showModal","setShowModal","clearInterval","setInterval","prevTime","quizdata","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f90513b6.chunk.js","sourcesContent":["import React , {useEffect, useState} from 'react'\nimport './App.css';\nimport Start from './components/Start'\nimport Question from './components/Question'\nimport End from './components/End.js'\nimport Modal from './components/Modal'\nimport quizdata from './data/quizData.json';\n\nlet interval;\n\nfunction App() {\n\n  const [step, setStep] = useState(1);\n  const [activeQuestion, setActiveQuestion] = useState(0);\n  const [answers, setAnswer] = useState([]);\n  const [time, setTime] = useState(0);\n\n  const [showModal, setShowModal] = useState(false);\n\n\n  const resetHandler = () => {\n    setActiveQuestion(0);\n    setAnswer([]);\n    setStep(2);\n    setTime(0);\n\n     interval = setInterval(() => {\n\n      setTime(prevTime => prevTime + 1)\n\n    }, 1000);\n  }\n\n const quizStartHandler = () => {\n    setStep(2);\n    interval = setInterval(() => {\n\n      setTime(prevTime => prevTime + 1)\n\n    }, 1000);\n  }\n\n   useEffect(() => {\n\n    if (step === 3) {\n      \n       clearInterval(interval);\n    }\n   }, [step])\n\n\n  return (\n    <div className=\"App\">\n      {step === 1 && <Start onQuizStart={quizStartHandler}/>}\n      {step === 2 && <Question\n        data={quizdata.data[activeQuestion]}\n        onAnswerUpdate={setAnswer}\n        numberOfQuestions={quizdata.data.length}\n        activeQuestion={activeQuestion}\n        onSetActiveQuestion={setActiveQuestion}\n        onSetStep={setStep}\n\n      />}\n      {step === 3 && <End \n        results={answers}\n        data={quizdata.data}\n        onReset={resetHandler}\n        onAnswerUpdate={() => setShowModal(true)}\n        time={time}\n      />}\n\n      {showModal && <Modal \n        onClose={() => setShowModal(false)}\n        results={answers}\n        data={quizdata.data}\n      />}\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\n\nconst Start = ({ onQuizStart}) => {\n    \n    return (\n        <div className='card'>\n            <div className='card-content'>\n                <div className='content'>\n                    <h1 className=\"start-h1\">Start the quiz</h1>\n                    <p>Good Luck!</p>\n                    <button className='button is-info is-medium'\n                    onClick={onQuizStart}>\n                        Start\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Start;","import React, { useState, useEffect, useRef } from 'react';\n\n\nconst Question = ({ data, onAnswerUpdate, numberOfQuestions,\n  activeQuestion, onSetActiveQuestion, onSetStep }) => {\n  const [selected, setSelected] = useState('');\n  const [error, setError] = useState('');\n  const radiosWrapper = useRef();\n    \n  useEffect(() => {\n    const findCheckedInput =\n      radiosWrapper.current.querySelector('input:checked')\n  \n    if (findCheckedInput)\n    {\n      findCheckedInput.checked = false;\n     }\n  }, [data])\n   \n\n    const changeAnswerHandler = (e) => {\n      setSelected(e.target.value);\n      \n      if (error) {\n        setError('')\n      }\n    }\n\n    const nextClickHandler = (e) => {\n        if (selected === '')\n        {\n            return setError('please enter value')\n      }\n      \n      onAnswerUpdate(prevState =>\n        [...prevState, { q: data.question, a: selected }])\n      \n      setSelected('');\n\n\n      //if its not the last question\n      if (activeQuestion < numberOfQuestions - 1)\n      {\n        onSetActiveQuestion(activeQuestion + 1)\n      }\n      //if its the last question\n      else {\n        onSetStep(3);\n      }\n    }\n\n    return(\n    <div className=\"card\">\n      <div className=\"card-content\">\n                <div className=\"content\">\n                       \n          <h2 className=\"mb-5\">{data.question}</h2>\n          <div className=\"control\" ref={radiosWrapper}>\n            {data.choices.map((choice, i) => (\n              <label className=\"radio has-background-light\" key={i}>\n                <input type=\"radio\" name=\"answer\" value={choice} onChange={changeAnswerHandler} />\n                {choice}\n              </label>\n            ))}\n\n          </div>\n           {error && <div className=\"has-text-danger\">{error}</div>}\n          <button className=\"button is-link is-medium is-fullwidth mt-4\" onClick={nextClickHandler}>Next</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n    \n\n\n\nexport default Question;","const formatTime = time => {\n\n    if (time < 60)\n    {\n        return (\n            time < 10 ? `0${time}s` : `${time}s`\n        \n        )\n    }\n    else {\n    \n        return (\n            Math.floor((time / 60)) + 'm' + (time % 60) + 's'\n        )\n    \n    }\n\n};\n\nexport  {\n    formatTime\n}","import React, { useState, useEffect } from 'react'\nimport {formatTime} from '../utils/index'\n\nconst End = ({results, data, onReset, onAnswerUpdate, time }) => {\n    \n    \nconst [correctAnswers, setCorrectAnswers] = useState('');\n        \n\n        useEffect(() => {\n            \n            let correct = 0;\n\n            results.forEach((result, index) => {\n\n                if (result.a === data[index].answer) {\n                    correct++;\n                }\n            });\n\n            setCorrectAnswers(correct);\n        },[])\n\n    return (\n        <div class=\"card\">\n  <div class=\"card-content\">\n    <div class=\"content\">\n                    <h1>Results:</h1>\n                    <p>You scored {correctAnswers} out of {data.length}</p>\n                    <p> {Math.floor((correctAnswers / data.length) * 100)} %</p>\n                    <p> The time you took to finish the quiz: {formatTime(time)}</p>\n                    <button className=\"button is-primary\" onClick={onReset}> Try Again</button>\n                    <button className=\"button is-link\" onClick={onAnswerUpdate}> Check Answer</button>\n    </div>\n  </div>\n</div>\n    )\n}\n\nexport default End;","import React from 'react';\n\nconst Modal = ({ onClose, results, data }) => {\n  return(\n    <div className=\"modal is-active\">\n      <div className=\"modal-background\" onClick={onClose}></div>\n      <div className=\"modal-card\">\n        <header className=\"modal-card-head\">\n          <p className=\"modal-card-title\">Your answers</p>\n          <button className=\"delete\" onClick={onClose}></button>\n        </header>\n        <section className=\"modal-card-body content\">\n          <ul>\n            {results.map((result, id) => (\n              <li key={id} className=\"mb-6\">\n                <p><strong>{result.q}</strong></p>\n                <p className={result.a === data[id].answer ?\n                  'has-background-success has-text-white p-2' :\n                  'has-background-danger has-text-white p-2'}>\n                  Your answer: {result.a}</p>\n                {result.a !== data[id].answer &&\n                  <p className=\"has-background-link has-text-white p-2\">\n                    Correct answer: {data[id].answer}</p>}\n              </li>\n            ))}\n          </ul>\n        </section>\n      </div>\n    </div>\n  );\n}\n\nexport default Modal;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import 'bulma/css/bulma.min.css';\nimport 'bulma/css/bulma.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}